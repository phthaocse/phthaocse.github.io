<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Thao Phan Posts</title>
    <link>http://localhost:1313/tags/go/</link>
    <description>Recent content in Go on Thao Phan Posts</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 24 Mar 2022 16:55:00 +0700</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Interface</title>
      <link>http://localhost:1313/posts/2022-03-24-go-interface/</link>
      <pubDate>Thu, 24 Mar 2022 16:55:00 +0700</pubDate>
      <guid>http://localhost:1313/posts/2022-03-24-go-interface/</guid>
      <description>Giống như các ngôn ngữ lập trình khác, nơi mà chúng ta đều có thể tìm kiếm những khái niệm liên quan đến &amp;ldquo;Interface&amp;rdquo;, với những ngôn ngữ hướng đối tượng kiểu tĩnh như Java, C# … thì cũng chính là interface, với những ngôn ngữ kiểu động thì có một khái niệm gần sát là “Duck Tying&amp;quot;. Go interface cũng mang trong mình những đặc tính đó, nếu hiểu interface trong Java là &amp;ldquo;explicit interface&amp;rdquo; thì đối với Go nó là &amp;ldquo;implicit interface&amp;rdquo;, trên hệ quy chiếu của các ngôn ngữ kiểu động thì có thể gọi Go Interface là Type-Safe Duck Typing. Điều đó nói lên điều gì ? Go không nghiêng về hẳn về một bên nào, mà ngược lại như một kẻ trung lập đứng ở giữa và chấp nhận quan điểm của cả hai trường phái, điều đó giúp cho Interface trong Go trở nên thật mạnh mẽ nhưng cũng thật tao nhã.</description>
    </item>
  </channel>
</rss>
